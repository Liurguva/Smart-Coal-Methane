import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch
from torch import nn
from sklearn.metrics import classification_report

# 1. Generate multi-location data
np.random.seed(42)
n_locations = 3
n_months = 120
months = pd.date_range(start='2012-01-01', periods=n_months, freq='M')
leak_months = [20, 45, 70, 95]
data_all = []

for loc in range(n_locations):
    base_flux = 50 + 5 * np.sin(np.linspace(0, 10 * np.pi, n_months)) + np.random.normal(0, 2, n_months)
    loc_flux = base_flux + np.random.normal(0, 2, n_months)

    for lm in leak_months:
        influence = np.exp(-abs(loc - 1))  # center location gets strongest signal
        loc_flux[lm - 2:lm] += np.linspace(3, 8, 2) * influence
        loc_flux[lm] += 20 * influence
        loc_flux[lm + 1:lm + 3] += np.linspace(8, 3, 2) * influence

    df = pd.DataFrame({'month': months, 'flux': loc_flux})
    df['flux_anomaly'] = df['flux'] - df['flux'].rolling(12, center=True).mean()
    df['d_flux'] = df['flux_anomaly'].diff()
    df['seam_depth'] = 300 + 30 * np.sin(np.linspace(0, 12, n_months)) + 5 * loc
    df['porosity'] = 0.05 + 0.01 * np.cos(np.linspace(0, 6, n_months)) - 0.001 * loc
    df['fault_proximity'] = np.clip(np.random.uniform(0, 1, n_months) + 0.1 * (loc - 1), 0, 1)

    df['leak'] = 0
    for lm in leak_months:
        df.loc[df.index[lm - 2:lm + 1], 'leak'] = 1
    df['location'] = loc
    data_all.append(df)

df_all = pd.concat(data_all).dropna().reset_index(drop=True)

# 2. Physics-Informed Model Definition
class MultiLocInverseModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.log_perm = nn.Parameter(torch.tensor([-30.0]))  # log permeability
        self.log_visc = nn.Parameter(torch.tensor([-10.0]))  # log viscosity
        self.pressure_factor = nn.Parameter(torch.tensor([0.1]))
        self.net = nn.Sequential(
            nn.Linear(8, 32),
            nn.ReLU(),
            nn.Linear(32, 16),
            nn.ReLU(),
            nn.Linear(16, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        flux, anomaly, d_flux, depth, porosity, fault, loc = x[:, 0], x[:, 1], x[:, 2], x[:, 3], x[:, 4], x[:, 5], x[:, 6]
        perm = torch.exp(self.log_perm)
        visc = torch.exp(self.log_visc)
        dP = self.pressure_factor * (10 + 40 * fault)
        transport = (perm * porosity * dP) / (depth * visc)
        transport = transport.view(-1, 1)
        x_aug = torch.cat([x, transport], dim=1)
        return self.net(x_aug)

# 3. Train the Model
features = ['flux', 'flux_anomaly', 'd_flux', 'seam_depth', 'porosity', 'fault_proximity', 'location']
X = torch.tensor(df_all[features].values, dtype=torch.float32)
y = torch.tensor(df_all['leak'].values.reshape(-1, 1), dtype=torch.float32)

model = MultiLocInverseModel()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
loss_fn = nn.BCELoss()

for epoch in range(500):
    model.train()
    y_pred = model(X)
    loss = loss_fn(y_pred, y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    if epoch % 100 == 0:
        print(f"Epoch {epoch} | Loss: {loss.item():.4f}")

# 4. Evaluate and Visualize
model.eval()
with torch.no_grad():
    y_probs = model(X).numpy().flatten()
    y_class = (y_probs >= 0.5).astype(int)

df_all['inv_pred'] = y_class

# Metrics
print("\n=== Classification Report ===")
print(classification_report(df_all['leak'], df_all['inv_pred']))

print("\n=== Learned Physics Parameters ===")
print(f"Permeability (m^2): {torch.exp(model.log_perm).item():.2e}")
print(f"Viscosity (Pa.s):   {torch.exp(model.log_visc).item():.2e}")
print(f"Pressure factor:    {model.pressure_factor.item():.4f}")

# Lead time
lead_times = []
for loc in range(n_locations):
    df_loc = df_all[df_all['location'] == loc]
    for lm in leak_months:
        idx_start = df_loc.index[df_loc['month'] == months[lm - 2]].tolist()[0]
        window = df_loc.iloc[idx_start:idx_start + 3]
        hits = window[window['inv_pred'] == 1]
        if not hits.empty:
            lead_time = lm - df_loc.index.get_loc(hits.index[0])
            lead_times.append(lead_time)
avg_lead_time = np.mean(lead_times) if lead_times else 0
print(f"\nAverage Lead Time: {avg_lead_time:.2f} months")

# Plot
fig, axs = plt.subplots(n_locations, 1, figsize=(14, 4 * n_locations), sharex=True)
for i, loc in enumerate(range(n_locations)):
    df_plot = df_all[df_all['location'] == loc]
    axs[i].plot(df_plot['month'], df_plot['flux'], label='Flux', color='gray')
    axs[i].scatter(df_plot[df_plot['leak'] == 1]['month'], df_plot[df_plot['leak'] == 1]['flux'],
                   color='red', label='Leak (True)', zorder=5)
    axs[i].scatter(df_plot[df_plot['inv_pred'] == 1]['month'], df_plot[df_plot['inv_pred'] == 1]['flux'],
                   color='green', marker='x', label='Inverse Prediction', zorder=5)
    axs[i].set_title(f"Location {loc}")
    axs[i].set_ylabel("Flux")
    axs[i].legend()
    axs[i].grid(True)

plt.xlabel("Date")
plt.tight_layout()
plt.show()
